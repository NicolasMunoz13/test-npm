version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0  #Orb para el uso de sonarclouden circleci

jobs:
  test:
    working_directory: ~/repo
    docker:
      - image: cimg/node:20.5.1
    steps:
      - checkout

      - restore_cache: #Para restaurar las dependencias
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
      - run: 
          name: Install dependencies #Es buena practica agregar el nombre del run
          command: npm install
      
      - save_cache: #Guarda las dependencias para que el siguiente deploy sea mas rapido la instalación
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run Lint
          command: npm run lint:report
      - run:
          name: Run tests
          command: npm run test:coverage
      - store_test_results: #Para subir los resultados en formato xml
          path: test-results.xml
      - sonarcloud/scan
      - persist_to_workspace: #Permite que todo lo que se ejecuto en test no se pierda y se pueda usar en el siguiente job
            root: ~/repo
            paths: .
  deploy:
    working_directory: ~/repo
    docker:
      - image: cimg/node:20.5.1
    steps:
      - attach_workspace: #Trayendo la informacion del job anterior persistida
          at: ~/repo
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > ~/repo/.npmrc #Para mostrar el token con registro para la publicacion del npm
      - run:
          name: Pack package
          command: npm pack #Se busca empaquetar el .tgz
      - run:
          name: Publis package
          command: npm publish --dry-run #Para la publicacion del paquete npm con el .tgz
      - store_artifacts: #Para guardar los artifacts
          path: ~/repo/dist
          destination: dist
      - store_artifacts:
          path: ~/repo/docs
          destinantion: docs


workflows:
  test-deploy:
    jobs:
      - test:
          context: sonarCloud #se llama el contexto creado en los settings de circleci y para leer los secretos en el cotext
      - deploy:
          context: sonarCloud
          requires:
            - test
          filters: #Se usan los filtros cuando se crea una etiqueta para que el deploy se ejecute solo en ese caso
            tags:
              only: /^v.*/ #Se va a ejecutar en las etiquetas que inicien por v
            branches:
              ignore: /.*/ #Se va a ignorar en todos los branches

#Los contextos se usan para guardar secretos en circleci para guardas tokens
#El contexto se agrega desde los settings de la organizacon agregando como variable de ambiente
#Los contextos se añaden a nivel de workflow
#Se debe agregar un archivo soner-project.properties para configurar los test coverage en circleci